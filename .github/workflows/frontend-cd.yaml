name: Frontend Continuous Deployment

env:
  NODE_VERSION: '18.x'
  KUBECONFIG: ${{ github.workspace }}/starter/frontend/kubeconfig

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            starter/frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Run linting
        run: npm run lint
        continue-on-error: false
        working-directory: starter/frontend

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            starter/frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Run tests
        run: CI=true npm run test
        continue-on-error: false
        working-directory: starter/frontend
  
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: |
            starter/frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci
        working-directory: starter/frontend

      - name: Build project
        run: docker build -t movie-frontend .
        working-directory: starter/frontend

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to AWS ECR Registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Fetch short Git SHA
        id: vars
        run: echo "SHA_SHORT=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      
      - name: Build, tag, and push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY_FE }}
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "IMAGE_URI: $IMAGE_URI"
          docker build -t $IMAGE_URI:latest -t $IMAGE_URI:$SHA_SHORT .
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:$SHA_SHORT
        working-directory: starter/frontend
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.CLUSTER_NAME }} --kubeconfig $PWD/kubeconfig
          export KUBECONFIG=$PWD/kubeconfig
          kubectl config current-context
          kubectl config use-context arn:aws:eks:${{ vars.AWS_REGION }}:038713363621:cluster/saurav-eks
        working-directory: starter/frontend
      
      - name: Apply manifests
        run: |
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
        working-directory: starter/frontend/k8s
      
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/frontend frontend=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY_FE }}:latest --namespace ${{ vars.KUBE_NAMESPACE }}
          kubectl rollout status deployment/frontend --namespace ${{ vars.KUBE_NAMESPACE }}
        working-directory: starter/frontend
